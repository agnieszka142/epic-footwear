<!-- AddShoes.razor -->
@page "/shoes/add"
@page "/shoes/edit/{id:int}"

@using Grzymska.EpicFootwear.Interfaces
@using Grzymska.EpicFootwear.Core
@using Grzymska.EpicFootwear.WEB.Models

@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@if (Brands == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container" style="margin-top: 100px;">
        <h3>Add new shoes</h3>

        <div class="form-group">
            <label for="Name">Model Name</label>
            <input type="text" class="form-control" @bind="Shoe.Name" />
        </div>

        <div class="form-group">
            <label for="Brand">Brand</label>
            <select class="form-control" @bind="SelectedBrandId">
                @foreach (var brand in Brands)
                {
                    <option value="@brand.ID">@brand.Name</option>
                }
            </select>
        </div>

        <div class="form-group">
            <label for="ShoeType">Shoe Type</label>
            <select class="form-control" @bind="Shoe.ShoeType">
                @foreach (var shoeType in ShoeTypes)
                {
                    <option value="@shoeType">@shoeType</option>
                }
            </select>
        </div>

        <div class="button-group">
            <button class="btn btn-primary" @onclick="SaveShoe">Submit</button>
            <button class="btn btn-secondary" @onclick='() => NavigationManager.NavigateTo("/shoes")'>Cancel</button>
        </div>
    </div>
}

@code {
    private IShoe Shoe { get; set; }
    private IEnumerable<Brand> Brands;
    private IEnumerable<ShoeType> ShoeTypes = (IEnumerable<ShoeType>)Enum.GetValues(typeof(ShoeType));

    private bool IsEditMode { get; set; }

    private int SelectedBrandId { get; set; }

    [Parameter]
    public int id { get; set; }

    protected override async Task OnInitializedAsync()
    {
        await GetBrands();

        IsEditMode = NavigationManager.Uri.Contains("/shoes/edit");

        if (IsEditMode)
        {
            await GetShoeFromUrl();
        }
        else
        {
            await GetNewShoe();
        }
    }

    private async Task GetBrands()
    {
        Brands = await httpClient.GetFromJsonAsync<IEnumerable<Brand>>("https://localhost:7209/api/brands");
    }

    private async Task GetShoeFromUrl()
    {
        Shoe = await httpClient.GetFromJsonAsync<Shoe>($"https://localhost:7209/api/shoes/{id}");
        SelectedBrandId = Shoe.Brand?.ID ?? 0;
    }

    private async Task GetNewShoe()
    {
        Shoe = await httpClient.GetFromJsonAsync<Shoe>("https://localhost:7209/api/shoes/new");
    }

    private async Task SaveShoe()
    {
        Shoe.Brand = Brands.FirstOrDefault(b => b.ID == SelectedBrandId);
        await httpClient.PostAsJsonAsync<Shoe>("https://localhost:7209/api/shoes", (Shoe)Shoe);
            
        NavigationManager.NavigateTo("/shoes");
    }
}
