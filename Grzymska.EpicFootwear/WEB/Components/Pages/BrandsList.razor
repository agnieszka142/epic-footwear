@page "/brands"
@using Grzymska.EpicFootwear.Interfaces
@using Grzymska.EpicFootwear.WEB.Models

@inject HttpClient httpClient
@inject NavigationManager NavigationManager
@rendermode InteractiveServer

@if (Brands == null)
{
    <p><em>Loading...</em></p>
}
else
{
    <div class="container">
        <div class="header">
            <h2>List of saved brands</h2>
        </div>

        <div class="search-bar">
            <input class="filter-input" @bind="filterString" />
            <button class="filter-button" @onclick="FilterBrands">Search</button>
        </div>

        <div class="brand-list">
            <table>
                <thead>
                    <tr>
                        <th>ID</th>
                        <th>Brand Name</th>
                        <th>Country</th>
                        <th>Founded in</th>
                        <th>Edit</th>
                        <th>Delete</th>
                    </tr>
                </thead>
                <tbody>
                    @foreach (var brand in FilteredBrands)
                    {
                        <tr>
                            <td>@brand.ID</td>
                            <td>@brand.Name</td>
                            <td>@brand.Country</td>
                            <td>@brand.Founded</td>
                            <td><button class="edit-button" @onclick='() => NavigationManager.NavigateTo($"/brands/edit/{brand.ID}")'>Edit</button></td>
                            <td><button class="delete-button" @onclick="() => DeleteBrand(brand.ID)">Delete</button></td>
                        </tr>
                    }
                </tbody>
            </table>
        </div>

        <button class="add-button" @onclick='() => NavigationManager.NavigateTo("/brands/add")'>Add brand</button>
    </div>
}

@code {
    private IEnumerable<Brand> Brands;
    private IEnumerable<Brand> FilteredBrands;
    private string filterString = string.Empty;


    private async Task GetBrands()
    {
        Brands = await httpClient.GetFromJsonAsync<IEnumerable<Brand>>("https://localhost:7209/api/brands");
        FilterBrands();
    }

    private void FilterBrands()
    {
        if (string.IsNullOrWhiteSpace(filterString))
        {
            FilteredBrands = Brands;
        }
        else
        {
            FilteredBrands = Brands.Where(brand => brand.Name.Contains(filterString, StringComparison.OrdinalIgnoreCase));
        }
    }

    protected override async Task OnInitializedAsync()
    {
        await GetBrands();
        FilterBrands();
    }

    private async Task DeleteBrand(int id)
    {
        await httpClient.DeleteAsync($"https://localhost:7209/api/brands/{id}");
        await GetBrands();
    }
}
